En el espacio NoSQL en particular, los ingenieros se enfrentan a muchas opciones cuando deciden cómo modelar y almacenar datos. Esas opciones se complican por el hecho de que la mayoría de los sistemas de administración de bases de datos combinan estrechamente todos los diferentes «niveles» de sus pilas de tecnología, como el motor de almacenamiento, el modelo de datos y el lenguaje de consulta. Los sistemas multimodelo que desacoplan el lenguaje de consulta y el modelo de datos del almacén de datos subyacente permiten escalar diferentes componentes dentro de la arquitectura de manera independiente a medida que cambian las necesidades. Por lo tanto, varias partes del sistema backend pueden ampliarse horizontalmente en respuesta a un mayor rendimiento o requisitos de almacenamiento, ya sea porque una nueva aplicación se pone en línea o una carga de trabajo de la aplicación existente cambia. 

El objetivo de la persistencia políglota es utilizar el mejor componente para el trabajo, pero en la práctica significa que puede terminar con varias bases de datos, cada una con su propio almacenamiento y requisitos operativos. La integración de esos sistemas es un desafío operacional difícil, y tratar de integrarlos en un sistema cohesivo y más grande que las aplicaciones puedan usar, especialmente cuando se trata de mantener la consistencia de los datos y la tolerancia a fallas, puede ser casi imposible. Un enfoque de modelos múltiples implica la asignación de múltiples modelos de datos en un único motor de almacenamiento subyacente que puede admitir diferentes casos de uso y aplicaciones. Este enfoque proporciona un modelado de datos flexible sin la complejidad de operar múltiples almacenes de datos. 

Los costos de ese tiempo de inactividad, ya sea esperado o inesperado, pueden ser tremendos tanto en términos de costos monetarios como de compromiso del usuario y experiencia con la aplicación. En consecuencia, no hay una buena manera de mantener la coherencia entre los diferentes modelos. Supongamos que su aplicación recibe un flujo de datos sobre la actividad del usuario y decide almacenar elementos de datos relacionados en una estructura de serie temporal, formato de gráfico y formato de documento. Sin embargo, un solo sistema backend que soporta múltiples modelos de datos basados en los requisitos de la aplicación puede lograr este objetivo. 

Asegurar que un sistema con muchos componentes de cualquier tipo sea tolerante a fallos no es una tarea fácil por decir lo menos. Además, cada cambio en cada componente requiere que la organización pruebe el nuevo componente, realice los cambios necesarios en las aplicaciones y productos, y luego ejecute un proceso para liberar todos estos cambios en el entorno de producción. Debido a que un verdadero sistema de múltiples modelos requiere transacciones para garantizar que los datos se almacenen de manera consistente en la base de datos, todas sus aplicaciones heredan este contrato sólido de cómo se almacenan los datos. Si bien este beneficio puede no parecer significativo ya que la base de datos relacional de una sola máquina puede proporcionar transacciones, los beneficios de las transacciones como parte de un sistema distribuido y tolerante a fallos que puede escalar de manera flexible son tremendos. 

Tratar de ejecutar diferentes bases de datos para alimentar una aplicación puede ser una pesadilla operativa y de desarrollo. En contraste, una aplicación que es compatible con una base de datos de múltiples modelos obtiene los beneficios de escalabilidad, tolerancia a fallas y, en un sistema bien diseñado, alto rendimiento integrado en el producto. 
